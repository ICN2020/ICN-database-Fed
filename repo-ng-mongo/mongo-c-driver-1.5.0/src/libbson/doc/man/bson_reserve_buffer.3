.\" This manpage is Copyright (C) 2016 MongoDB, Inc.
.\" 
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.3
.\" or any later version published by the Free Software Foundation;
.\" with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
.\" A copy of the license is included in the section entitled "GNU
.\" Free Documentation License".
.\" 
.TH "BSON_RESERVE_BUFFER" "3" "2016\(hy11\(hy10" "libbson"
.SH NAME
bson_reserve_buffer() \- Grow the internal buffer of bson to size and set the document length to size. Useful for eliminating copies when reading BSON bytes from a stream.
.SH "SYNOPSIS"

.nf
.nf
uint8_t *
bson_reserve_buffer (bson_t   *bson,
                     uint32_t  size);
.fi
.fi

.SH "PARAMETERS"

.TP
.B
bson
An initialized
.B bson_t
.
.LP
.TP
.B
size
The length in bytes of the new buffer.
.LP

.SH "DESCRIPTION"

Grow the internal buffer of
.B bson
to
.B size
and set the document length to
.B size
. Useful for eliminating copies when reading BSON bytes from a stream.

First, initialize
.B bson
with
.B bson_init
or
.B bson_new
, then call this function. After it returns, the length of
.B bson
is set to
.B size
but its contents are uninitialized memory: you must fill the contents with a BSON document of the correct length before any other operations.

The document must be freed with
.B bson_destroy
.

.SH "RETURNS"

A pointer to the internal buffer, which is at least
.B size
bytes, or NULL if the space could not be allocated.

.SH "EXAMPLE"

Use
.B bson_reserve_buffer
to write a function that takes a
.B bson_t
pointer and reads a file into it directly:

.nf
#include <stdio.h>
#include <bson.h>

bool
read_into (bson_t   *bson,
           FILE     *fp)
{
   uint8_t *buffer;
   long size;

   if (fseek(fp, 0L, SEEK_END) < 0) {
      perror ("Couldn't get file size");
      return 1;
   }

   size = ftell (fp);
   if (size == EOF) {
      perror ("Couldn't get file size");
      return 1;
   }

   if (size > INT32_MAX) {
      fprintf (stderr, "File too large\en");
      return 1;
   }

   /* reserve buffer space \(hy bson is temporarily invalid */
   buffer = bson_reserve_buffer (bson, (uint32_t) size);
   if (!buffer) {
      fprintf (stderr, "Couldn't reserve %ld bytes", size);
      return false;
   }

   /* read file directly into the buffer */
   rewind(fp);
   if (fread ((void *) buffer, 1, (size_t) size, fp) < (size_t) size) {
      perror ("Couldn't read file");
      return false;
   }

   return true;
}

int
main ()
{
   FILE *fp;
   char *json;

   /* stack\(hyallocated, initialized bson_t */
   bson_t bson = BSON_INITIALIZER;

   if (!(fp = fopen ("document.bson", "rb"))) {
      perror ("Couldn't read file");
      return 1;
   }

   read_into (&bson, fp);
   fclose (fp);

   json = bson_as_json (&bson, NULL);
   printf ("%s\en", json);

   bson_free (json);
   bson_destroy (&bson);

   return 0;
}
.fi

See also
.B bson_steal
and
.B bson_destroy_with_steal
.


.B
.SH COLOPHON
This page is part of libbson.
Please report any bugs at https://jira.mongodb.org/browse/CDRIVER.