.\" This manpage is Copyright (C) 2016 MongoDB, Inc.
.\" 
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.3
.\" or any later version published by the Free Software Foundation;
.\" with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
.\" A copy of the license is included in the section entitled "GNU
.\" Free Documentation License".
.\" 
.TH "MONGOC_CLIENT_READ_COMMAND_WITH_OPTS" "3" "2016\(hy11\(hy27" "MongoDB C Driver"
.SH NAME
mongoc_client_read_command_with_opts() \- None
.SH "SYNOPSIS"

.nf
.nf
bool
mongoc_client_read_command_with_opts (mongoc_client_t           *client,
                                      const char                *db_name,
                                      const bson_t              *command,
                                      const mongoc_read_prefs_t *read_prefs,
                                      const bson_t              *opts,
                                      bson_t                    *reply,
                                      bson_error_t              *error);
.fi
.fi

Execute a command on the server, applying logic that is specific to commands that read, and taking the MongoDB server version into account. To send a raw command to the server without any of this logic, use
.B mongoc_client_command_simple
.

Use this function for commands that read such as "count" or "distinct". Read concern is applied from
.B opts
or else from
.B client
. Collation is applied from
.B opts
(see example below). Read concern and collation both require MongoDB 3.2 or later, otherwise an error is returned. Read preferences are applied from
.B read_prefs
or else from
.B client
. No write concern is applied.

To target a specific server, include an integer "serverId" field in
.B opts
with an id obtained first by calling
.B mongoc_client_select_server
, then
.B mongoc_server_description_id
on its return value.

.B reply
is always initialized, and must be freed with
.B bson_destroy(3)
.

.SH "PARAMETERS"

.TP
.B
client
A
.B mongoc_client_t
.
.LP
.TP
.B
db_name
The name of the database to run the command on.
.LP
.TP
.B
command
A
.B bson_t
containing the command specification.
.LP
.TP
.B
read_prefs
An optional
.B mongoc_read_prefs_t
.
.LP
.TP
.B
opts
A
.B bson_t
containing additional options.
.LP
.TP
.B
reply
A location for the resulting document.
.LP
.TP
.B
error
An optional location for a
.B bson_error_t
or
.B NULL
.
.LP

.SH "ERRORS"

Errors are propagated via the
.B error
parameter.

.SH "RETURNS"

.B true
if successful; otherwise
.B false
and
.B error
is set.

.SH "EXAMPLE"

.nf
.nf

/*

Demonstrates how to prepare options for mongoc_client_read_command_with_opts and
mongoc_client_write_command_with_opts. First it calls "cloneCollectionAsCapped"
command with "writeConcern" option, then "distinct" command with "collation" and
"readConcern" options,

Start a MongoDB 3.4 replica set with \(hy\(hyenableMajorityReadConcern and insert two
documents:

$ mongo
MongoDB Enterprise replset:PRIMARY> db.my_collection.insert({x: 1, y: "One"})
WriteResult({ "nInserted" : 1 })
MongoDB Enterprise replset:PRIMARY> db.my_collection.insert({x: 2, y: "Two"})
WriteResult({ "nInserted" : 1 })

Build and run the example:

gcc example\(hycommand\(hywith\(hyopts.c \(hyo example\(hycommand\(hywith\(hyopts $(pkg\(hyconfig \(hy\(hycflags \(hy\(hylibs libmongoc\(hy1.0)
./example\(hycommand\(hywith\(hyopts [CONNECTION_STRING]
cloneCollectionAsCapped: { "ok" : 1 }
distinct: { "values" : [ 1, 2 ], "ok" : 1 }

*/

#include <mongoc.h>
#include <stdio.h>
#include <stdlib.h>

int
main (int   argc,
      char *argv[])
{
   mongoc_client_t *client;
   const char *uristr = "mongodb://127.0.0.1/?appname=client\(hyexample";
   bson_t *cmd;
   bson_t *opts;
   mongoc_write_concern_t *write_concern;
   mongoc_read_prefs_t *read_prefs;
   mongoc_read_concern_t *read_concern;
   bson_t reply;
   bson_error_t error;
   char *json;

   mongoc_init ();

   if (argc > 1) {
      uristr = argv [1];
   }

   client = mongoc_client_new (uristr);

   if (!client) {
      fprintf (stderr, "Failed to parse URI.\en");
      return EXIT_FAILURE;
   }

   mongoc_client_set_error_api (client, 2);

   cmd = BCON_NEW ("cloneCollectionAsCapped", BCON_UTF8 ("my_collection"),
                   "toCollection", BCON_UTF8 ("my_capped_collection"),
                   "size", BCON_INT64 (1024 * 1024));

   /* include write concern "majority" in command options */
   write_concern = mongoc_write_concern_new ();
   mongoc_write_concern_set_wmajority (write_concern, 10000 /* wtimeoutMS */);
   opts = bson_new ();
   mongoc_write_concern_append (write_concern, opts);

   if (mongoc_client_write_command_with_opts (client,
                                              "test",
                                              cmd,
                                              opts,
                                              &reply,
                                              &error)) {
      json = bson_as_json (&reply, NULL);
      printf ("cloneCollectionAsCapped: %s\en", json);
      bson_free (json);
   } else {
      fprintf (stderr, "cloneCollectionAsCapped: %s\en", error.message);
   }

   bson_free (cmd);
   bson_free (opts);

   /* distinct values of "x" in "my_collection" where "y" sorts after "one" */
   cmd = BCON_NEW ("distinct", BCON_UTF8 ("my_collection"),
                   "key", BCON_UTF8 ("x"),
                   "query", "{", "y", "{", "$gt", BCON_UTF8 ("one"), "}", "}");

   read_prefs = mongoc_read_prefs_new (MONGOC_READ_SECONDARY);

   /* "One" normally sorts before "one"; make "One" sort after "one" */
   opts = BCON_NEW ("collation", "{",
                    "locale", BCON_UTF8 ("en_US"),
                    "caseFirst", BCON_UTF8 ("lower"),
                    "}");

   /* add a read concern to "opts" */
   read_concern = mongoc_read_concern_new ();
   mongoc_read_concern_set_level (read_concern,
                                  MONGOC_READ_CONCERN_LEVEL_MAJORITY);

   mongoc_read_concern_append (read_concern, opts);

   if (mongoc_client_read_command_with_opts (client,
                                             "test",
                                             cmd,
                                             read_prefs,
                                             opts,
                                             &reply,
                                             &error)) {
      json = bson_as_json (&reply, NULL);
      printf ("distinct: %s\en", json);
      bson_free (json);
   } else {
      fprintf (stderr, "distinct: %s\en", error.message);
   }

   bson_destroy (cmd);
   bson_destroy (opts);
   bson_destroy (&reply);
   mongoc_read_prefs_destroy (read_prefs);
   mongoc_read_concern_destroy (read_concern);
   mongoc_write_concern_destroy (write_concern);
   mongoc_client_destroy (client);

   mongoc_cleanup ();

   return EXIT_SUCCESS;
}
.fi
.fi


.B
.SH COLOPHON
This page is part of MongoDB C Driver.
Please report any bugs at https://jira.mongodb.org/browse/CDRIVER.